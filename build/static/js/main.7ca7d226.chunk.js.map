{"version":3,"sources":["constant.js","components/login/index.tsx","components/register/registerForm.tsx","components/toaster/toast.tsx","components/render-field.tsx","components/register/index.tsx","components/toaster/action.js","app-router.tsx","components/toaster/reducer.js","store/index.js","components/footer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EMAIL_ERROR","EMAIL_REGEX","initialState","password","userName","isUserNameVerified","isFormValid","buttonState","reducer","state","action","type","value","enteredEmail","Login","useReducer","dispatch","className","onClick","onSubmit","e","preventDefault","setTimeout","htmlFor","placeholder","onChange","event","target","to","toasterRoot","document","getElementById","Toaster","el","createElement","appendChild","this","removeChild","createPortal","props","children","Component","RenderField","input","label","meta","touched","error","warning","firstNameValidation","undefined","lastNameValidation","email","test","confirmEmailValidation","termsAndConditionValidation","RegisterForm","handleSubmit","Field","name","component","validate","href","React","prototype","PropTypes","func","reduxForm","form","Register","user","reset","enableToaster","history","push","connect","msg","message","toggleOnToaster","AppRouter","isToastOn","from","exact","path","toastMsg","bool","string","ToastReducer","combineReducers","reduxFormReducer","store","createStore","applyMiddleware","thunk","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7ca7d226.chunk.js","sourcesContent":["export const FIRST_NAME_ERROR = 'Please enter your first name'\nexport const LAST_NAME_ERROR = 'Please enter your last name'\nexport const EMAIL_ERROR = 'Please enter a valid email address'\nexport const EMAIL_CONFIRMATION_ERROR = 'Your email and confirmation email must match'\nexport const TERMS_AND_CONDITION_ERROR = 'Agreement to the Autodesk Terms of Use and Privacy Statement is required. Please check the box above to agree'\nexport const EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\nexport const UPDATE_NAME = 'UPDATE_NAME'\nexport const VERIFY_USER = 'VERIFY_USER'\nexport const TOGGLE_PASSWORD = 'TOGGLE_PASSWORD'\nexport const FORM_VALID = 'FORM_VALID'\nexport const RESET = 'RESET'\nexport const NEXT = 'Next'\nexport const VERIFYING = 'Verifying'\nexport const SIGN_IN = 'Sign in'\nexport const ACC_CREATION_SUCCESS_MSG = 'Your account has been created successfully'\nexport const TOASTER_INTERVAL = 5000\nexport const TOGGLE_ON_TOAST = 'TOGGLE_ON_TOAST'\nexport const TOGGLE_OFF_TOAST ='TOGGLE_OFF_TOAST'\n\n","import React, { useReducer } from 'react';\nimport { Link } from 'react-router-dom'\nimport '../../App.scss';\nimport {\n    UPDATE_NAME,\n    VERIFY_USER,\n    TOGGLE_PASSWORD,\n    FORM_VALID,\n    RESET,\n    NEXT,\n    VERIFYING,\n    SIGN_IN\n} from '../../constant'\n\nexport interface State {\n    password: string;\n    userName: string;\n    isUserNameVerified: boolean;\n    isFormValid: boolean;\n    buttonState: string;\n}\n\nconst initialState: State = {\n    password: '',\n    userName: '',\n    isUserNameVerified: false,\n    isFormValid: false,\n    buttonState: NEXT\n};\n\nfunction reducer(state: State, action: any): State {\n    switch (action.type) {\n        case UPDATE_NAME:\n            return { ...state, userName: action.value };\n        case VERIFY_USER:\n            return { ...state, buttonState: VERIFYING };\n        case TOGGLE_PASSWORD:\n            return { ...state, isUserNameVerified: true, buttonState: SIGN_IN };\n        case FORM_VALID:\n            return { ...state, isFormValid: true };\n        case RESET:\n            return { ...initialState };\n        default:\n            return state;\n    }\n}\n\nconst Login = () => {\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    const onSubmitEmail = (e: any) => {\n        e.preventDefault()\n        if (!!state.userName && !state.isUserNameVerified) {\n            dispatch({ type: VERIFY_USER })\n            setTimeout(() => {\n                dispatch({ type: TOGGLE_PASSWORD })\n            }, 1000)\n        }\n    }\n\n    const setPageHeader = () => {\n        if (!!state.userName && state.isUserNameVerified) {\n            return (\n                <div className=\"user-header\">\n                    <i onClick={() => dispatch({ type: RESET })} className=\"arrow left\"></i>\n                    <h3>Welcome</h3>\n                    <span>{state.userName}</span>\n                </div>)\n        }\n        return (\n            <h4 className=\"page-title\">Sign in</h4>\n        )\n    }\n\n    return (\n        <section className=\"login-register-container login-container\">\n            {setPageHeader()}\n            <form className=\"form-container\" onSubmit={onSubmitEmail}>\n                {!state.isUserNameVerified && <div className=\"form-control\">\n                    <label htmlFor=\"User name\">User Name</label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"User name\"\n                        value={state.userName}\n                        onChange={(event) => dispatch({ type: UPDATE_NAME, value: event.target.value })}\n                    />\n                </div>}\n                {state.isUserNameVerified && <div className=\"form-control\">\n                    <label htmlFor=\"Password\">Password</label>\n                    <input\n                        type=\"passsword\"\n                        placeholder=\"Passsword\"\n                    />\n                </div>}\n                <button type=\"submit\">{state.buttonState}</button>\n            </form>\n            <span className=\"create-account\">new to autodesk? <Link to=\"/register\">Create account</Link></span>\n        </section>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport { reduxForm, InjectedFormProps, Field } from 'redux-form';\nimport PropTypes from 'prop-types';\nimport '../../App.scss';\nimport { IUser } from './index';\nimport {\n    FIRST_NAME_ERROR,\n    LAST_NAME_ERROR,\n    EMAIL_ERROR,\n    EMAIL_CONFIRMATION_ERROR,\n    TERMS_AND_CONDITION_ERROR,\n    EMAIL_REGEX\n} from '../../constant'\nimport RenderField from '../render-field'\n\nlet enteredEmail: any\nconst firstNameValidation = (value: any) => value ? undefined : FIRST_NAME_ERROR\nconst lastNameValidation = (value: any) => value ? undefined : LAST_NAME_ERROR\nconst email = (value: any) => {\n    enteredEmail = value\n    return value && !EMAIL_REGEX.test(value) ?\n        EMAIL_ERROR : !value ? EMAIL_ERROR : undefined\n}\nconst confirmEmailValidation = (value: any) => {\n    return value === enteredEmail ? undefined : EMAIL_CONFIRMATION_ERROR\n}\n\nconst termsAndConditionValidation = (value: any) => value ? undefined : TERMS_AND_CONDITION_ERROR\n\nclass RegisterForm extends React.Component<InjectedFormProps<IUser>> {\n\n    render() {\n        const { handleSubmit } = this.props;\n        return (\n            <form className=\"form-container\" onSubmit={handleSubmit}>\n                <div className=\"name-field\">\n                    <div className=\"form-control\">\n                        <Field\n                            name=\"firstName\"\n                            component={RenderField}\n                            type=\"text\"\n                            placeholder=\" \"\n                            label=\"First Name\"\n                            validate={[firstNameValidation]}\n                        />\n                    </div>\n                    <div className=\"form-control\">\n                        <Field\n                            name=\"lastName\"\n                            component={RenderField}\n                            type=\"text\"\n                            placeholder=\" \"\n                            label=\"Last Name\"\n                            validate={[lastNameValidation]}\n                        />\n                    </div>\n                </div>\n                <div className=\"form-control\">\n                    <Field\n                        name=\"email\"\n                        component={RenderField}\n                        type=\"email\"\n                        placeholder=\" \"\n                        label=\"Email\"\n                        validate={[email]}\n                    />\n                </div>\n                <div className=\"form-control\">\n                    <Field\n                        name=\"confirmEmail\"\n                        component={RenderField}\n                        type=\"email\"\n                        placeholder=\" \"\n                        label=\"Confirm email\"\n                        validate={[confirmEmailValidation]}\n                    />\n                </div>\n                <div className=\"form-control\">\n                    <Field\n                        name=\"password\"\n                        component={RenderField}\n                        type=\"password\"\n                        placeholder=\" \"\n                        label=\"Password\"\n                        validate={[]}\n                    />\n                </div>\n                <div className=\"confirm-checkbox\">\n                    <span className=\"custom-checkbox\">I agree to the <a href=\"#\" onClick={(e) => e.preventDefault()}>Autodesk Terms of Use</a> and acknowledge the <a href=\"#\" onClick={(e) => e.preventDefault()}>Privacy Statement</a>.</span>\n                    <Field\n                        name=\"termsAndCondition\"\n                        component={RenderField}\n                        type=\"checkbox\"\n                        placeholder=\" \"\n                        label=\"\"\n                        validate={[termsAndConditionValidation]}\n                    />\n                </div>\n                <button type=\"submit\">Create account</button>\n            </form>\n        )\n    }\n}\n\nRenderField.prototype = {\n    handleSubmit: PropTypes.func\n}\n\nexport default reduxForm<IUser>({\n    form: 'RegisterForm',\n})(RegisterForm);","import { Component } from 'react';\nimport { createPortal } from 'react-dom'\n\nconst toasterRoot = document.getElementById('toaster') as HTMLElement;\n\nclass Toaster extends Component {\n    el: HTMLElement = document.createElement('div');\n\n    componentDidMount() {\n        toasterRoot.appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        toasterRoot.removeChild(this.el);\n    }\n\n    render() {\n        return createPortal(this.props.children, this.el);\n    }\n}\n\nexport default Toaster","import React from 'react'\n\nconst RenderField = ({ input, label, type, placeholder, meta: { touched, error, warning } }: any) => (\n    <>\n        <div className=\"input-label\">\n            <input {...input} placeholder={placeholder} type={type} />\n            <label htmlFor={label}>{label}</label>\n        </div>\n        {touched && ((error && <span className=\"input-error\">{error}</span>) || (warning && <span>{warning}</span>))}\n    </>\n)\n\nexport default RenderField","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport { reset } from 'redux-form';\nimport '../../App.scss';\nimport RegisterForm from './registerForm'\nimport { toasterToggler } from '../toaster/action'\nimport { ACC_CREATION_SUCCESS_MSG } from '../../constant'\n\nexport interface IUser {\n    firstName: string;\n    lastName: string;\n    email: string;\n    confirmEmail: string;\n    password: string;\n    termsAndCondition: boolean\n}\n\nconst Register = (props: any) => {\n\n    const onSubmitRegistration = (user: IUser, dispatch: any) => {\n        dispatch(reset('RegisterForm'))\n        props.enableToaster(ACC_CREATION_SUCCESS_MSG)\n        props.history.push('/')\n        \n    };\n    return (\n        <section className=\"login-register-container register-container\">\n            <h4 className=\"page-title\">Create account</h4>\n            <RegisterForm onSubmit={onSubmitRegistration} />\n            <span className=\"create-account\">Already have an account? <Link to=\"/login\">Sign in</Link></span>\n        </section>\n    )\n}\n\nRegister.prototype = {\n    enableToaster: PropTypes.func\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        enableToaster: (msg: string) => dispatch(toasterToggler(msg))\n    }\n  }\nexport default connect(null, mapDispatchToProps)(Register)","import {\n  TOASTER_INTERVAL,\n  TOGGLE_ON_TOAST,\n  TOGGLE_OFF_TOAST} from '../../constant'\n\nconst toggleOnToaster = (message) => {\n    return { type: TOGGLE_ON_TOAST, value: message }\n  }\n\n  const toggleOffToaster = () => {\n    return { type: TOGGLE_OFF_TOAST}\n  }\n\n  export const toasterToggler = (message) => (dispatch) => {\n    if(!!message) {\n        dispatch(toggleOnToaster(message))\n        setTimeout(() => {\n            dispatch(toggleOffToaster())\n        }, TOASTER_INTERVAL)\n    }\n  }","import React from 'react';\nimport { connect } from 'react-redux'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Login from './components/login'\nimport Toaster from './components/toaster/toast'\nimport Register from './components/register'\n\nconst AppRouter = (props: any) => {\n    return (\n        <>\n            <Router>{props.isToastOn}\n                <Switch>\n                    <Redirect from='/' exact to='/login' />\n                    <Route path='/login' component={Login} />\n                    <Route path='/register' component={Register} />\n                    <Route component={Login} />\n                </Switch>\n            </Router>\n    {props.isToastOn && <Toaster><span className=\"toast-msg\">{props.toastMsg}</span></Toaster>}\n        </>\n    )\n}\n\nAppRouter.prototype = {\n    isToastOn: PropTypes.bool,\n    toastMsg: PropTypes.string\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isToastOn: state.ToastReducer.isToastOn,\n        toastMsg: state.ToastReducer.toastMsg\n    }\n}\n\nexport default connect(mapStateToProps)(AppRouter)","\nimport {\n    TOGGLE_ON_TOAST,\n    TOGGLE_OFF_TOAST} from '../../constant'\n\nconst initialState = {\n    isToastOn: false,\n    toastMsg: ''\n};\n\nexport const ToastReducer = (state = initialState, action) =>{\n    switch (action.type) {\n        case TOGGLE_ON_TOAST:\n            return { ...state, isToastOn: true, toastMsg: action.value };\n        case TOGGLE_OFF_TOAST:\n            return { ...initialState };\n        default:\n            return state;\n    }\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { reducer as reduxFormReducer } from 'redux-form';\nimport thunk from 'redux-thunk';\nimport { ToastReducer } from '../components/toaster/reducer'\n\nconst reducer = combineReducers({\n  form: reduxFormReducer,\n  ToastReducer\n});\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;","import React from 'react'\nimport '../../App.scss';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <span>Your account for everything Autodesk<a href=\"#\" onClick={(e) => e.preventDefault()}>Learn more</a></span>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react';\nimport AppRouter from './app-router'\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport './App.scss';\nimport Footer from './components/footer'\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"root\">\n        <AppRouter />\n        <Footer />\n      </div>\n    </Provider>\n  );\n  }\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}